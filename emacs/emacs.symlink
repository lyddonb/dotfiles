(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)

(el-get-bundle key-chord)
(el-get-bundle monokai-theme)
(el-get-bundle neotree)
(el-get-bundle sr-speedbar)
(el-get-bundle auto-complete)
(el-get-bundle org-mode)
(el-get-bundle indent-guide)
(el-get-bundle undo-tree)
(el-get-bundle tabbar)
(el-get-bundle linum-relative)

;; Evil Packages
(el-get-bundle evil)
(el-get-bundle evil-surround)
(el-get-bundle evil-leader)
(el-get-bundle evil-nerd-commenter)
(el-get-bundle evil-jumper)
(el-get-bundle evil-visualstar)
(el-get-bundle evil-matchit)
(el-get-bundle evil-org-mode)

;; EVIL

;; Get tab back for orgmode which evil trys to steal
(setq evil-want-C-i-jump nil)

(require 'evil)
(define-key evil-motion-state-map ":" 'evil-repeat-find-char)
(define-key evil-motion-state-map ";" 'evil-ex)
(evil-mode 1)

;; Remap some keys for evil
(require 'key-chord)
;; Exit insert mode by pressing j and then j quickly
(setq key-chord-two-keys-delay 0.5)
(key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
(key-chord-mode 1)

;; EVIL Plugins

;; Evil Surround
(require 'evil-surround)
(global-evil-surround-mode 1)

;; Evil Leader
(global-evil-leader-mode)
(evil-leader/set-leader ",")
(evil-leader/set-key
  "e" 'find-file
  "b" 'switch-to-buffer
  "n" 'neotree-toggle
  "k" 'kill-buffer)

;; Evil Nerd Commenter
(evilnc-default-hotkeys)
;; Emacs key bindings
(global-set-key (kbd "M-;") 'evilnc-comment-or-uncomment-lines)
(global-set-key (kbd "C-c l") 'evilnc-quick-comment-or-uncomment-to-the-line)
(global-set-key (kbd "C-c c") 'evilnc-copy-and-comment-lines)
(global-set-key (kbd "C-c p") 'evilnc-comment-or-uncomment-paragraphs)

;; Vim key bindings
(require 'evil-leader)
(global-evil-leader-mode)
(evil-leader/set-key
  "ci" 'evilnc-comment-or-uncomment-lines
  "cl" 'evilnc-quick-comment-or-uncomment-to-the-line
  "cc" 'evilnc-copy-and-comment-lines
  "cp" 'evilnc-comment-or-uncomment-paragraphs
  )

;; Evil Jumper
(require 'evil-jumper)
(evil-jumper-mode t)

;; Evil Visualstar
(global-evil-visualstar-mode)

;; Theme
(add-to-list 'custom-theme-load-path "~/.emacs.d/el-get/monokai-theme/")
(load-theme 'monokai t)

;; Other Plugins

;; Neotree
(setq projectile-switch-project-action 'neotree-projectile-action)
(add-hook 'neotree-mode-hook
          (lambda()
            (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
            (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "o") 'neotree-enter)
            (define-key evil-normal-state-local-map (kbd "r") 'neotree-refresh)
            (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
            (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle)))

;; Sr-speedbar
(require 'sr-speedbar)
(speedbar 1)

;; Window Movement
(global-set-key (kbd "C-h") 'windmove-left)
(global-set-key (kbd "C-l") 'windmove-right)
(global-set-key (kbd "C-j") 'windmove-up)
(global-set-key (kbd "C-k") 'windmove-down)

;; Indent Guide
(require 'indent-guide)
(indent-guide-global-mode)

;; Whitespace
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Org Mode
;; The following lines are always needed. Choose your own keys.
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cb" 'org-iswitchb)

(require 'org)
(define-key global-map "\C-cl" 'org-store-link)
(setq org-agenda-files (list "~/Dropbox/org"))
(setq org-log-done t)

(require 'evil-org)

(with-eval-after-load 'linum
  (set-face-background 'linum nil)

  (require 'linum-relative)

  ;; truncate current line to four digits
  (defun linum-relative (line-number)
    (let* ((diff1 (abs (- line-number linum-relative-last-pos)))
            (diff (if (minusp diff1)
                    diff1
                    (+ diff1 linum-relative-plusp-offset)))
            (current-p (= diff linum-relative-plusp-offset))
            (current-symbol (if (and linum-relative-current-symbol current-p)
                              (if (string= "" linum-relative-current-symbol)
                                (number-to-string (% line-number 1000))
                                linum-relative-current-symbol)
                              (number-to-string diff)))
            (face (if current-p 'linum-relative-current-face 'linum)))
      (propertize (format linum-relative-format current-symbol) 'face face)))

  (setq
    linum-relative-current-symbol ""
    linum-relative-format "%3s "
    linum-delay t)

  (set-face-attribute 'linum-relative-current-face nil
    :weight 'extra-bold
    :foreground nil
    :background nil
    :inherit '(hl-line default)))

(require 'linum)
(global-linum-mode 1)

(global-visual-line-mode t)
